import {
  BadRequestException,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { MemberRole } from '@prisma/client';
import { ValidateMemberDto } from 'src/dtos/auth/auth.dto';
import {
  QuestionDto,
  BingoPayloadDto,
  PrizeObject,
  PatchTicketDto,
} from 'src/dtos/bingo/bingo.dto';
import { PrismaService } from 'src/libs/prisma';

@Injectable()
export class BingoService {
  private bingoPayload: QuestionDto[];
  private prize: PrizeObject;
  constructor(private prismaService: PrismaService) {
    this.bingoPayload = [
      { question: '‡πÑ‡∏õ‡∏Ñ‡∏≤‡∏£‡∏≤‡πÇ‡∏≠‡πÄ‡∏Å‡∏∞', is_checked: false },
      { question: '‡πÄ‡∏ï‡πâ‡∏ô TikTok', is_checked: false },
      { question: '‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£', is_checked: false },
      { question: '‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏ô', is_checked: false },
      { question: '‡∏î‡∏π‡∏ã‡∏µ‡∏£‡∏µ‡∏¢‡πå‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ô', is_checked: false },
      { question: '‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≤‡∏¢', is_checked: false },
      { question: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏¢‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ì‡∏∞', is_checked: false },
      { question: '‡πÉ‡∏ä‡πâ‡∏•‡∏¥‡∏ü‡∏ó‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏ä‡∏±‡πâ‡∏ô 2', is_checked: false },
      { question: '‡∏´‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', is_checked: false },
      { question: '‡∏î‡πâ‡∏ô‡∏™‡∏î present', is_checked: false },
      { question: '‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', is_checked: false },
      { question: '‡∏à‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏≠‡∏ö', is_checked: false },
      { question: '‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å', is_checked: false },
      { question: '‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏ú‡∏µ', is_checked: false },
      { question: '‡πÑ‡∏õ‡πÇ‡∏£‡∏ö‡∏¥‡∏ô‡∏™‡∏±‡∏ô‡∏•‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏±‡∏±‡∏á', is_checked: false },
      { question: '‡∏î‡∏π‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô', is_checked: false },
    ] satisfies typeof this.bingoPayload;
    this.prize = {
      5: [
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠ IG ‡∏û‡∏µ‡πà‡∏Ñ‡∏ô‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ 1 ‡∏Ñ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏û‡∏µ‡πà‡πÄ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ô‡∏∞üôÇ‚Äç‚ÜïÔ∏è)',
        '‡πÅ‡∏à‡πá‡∏Ñ‡∏û‡∏≠‡∏ï‡πÅ‡∏ï‡∏Å ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏£‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 17 ‡∏™.‡∏Ñ.',
      ],
      35: [
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏õ‡∏∞‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏±‡∏Å‡∏Ñ‡∏¥‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏¢‡∏¥‡∏ö‡∏ï‡∏≤‡πÉ‡∏™‡πà‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏±‡∏Å‡πÑ‡∏´‡∏•‡πà‡πÉ‡∏™‡πà‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™',
      ],
      60: [
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ß‡∏¢‡∏û‡∏£‡∏à‡∏≤‡∏Å‡∏û‡∏µ‡πà ‡πÜ IT21 ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏∞üçÄ',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Shake hands ‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡πâ‡∏≤‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡πâ‡∏á‡∏â‡∏∏‡∏ö 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡πà‡∏≤‡∏¢ IG Story ‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ã‡∏•‡∏ü‡∏µ‡πà‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏£‡∏´‡∏±‡∏™ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ IG : smo.itkmitl ‡∏Ç‡∏≠‡∏á‡∏™‡πÇ‡∏°‡∏™‡∏£‡∏Ñ‡∏ì‡∏∞‡πÑ‡∏≠‡∏ó‡∏µ !',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ IG : agape_kmitl ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ô‡∏∏‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡πÄ‡∏õ‡πâ !',
        '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ IG : itkmitl.photoclub ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ô‡∏∏‡∏°‡πÇ‡∏ü‡πÇ‡∏ï‡πâ !',
      ],
    } satisfies typeof this.prize;
  }

  private split_chunk = (val: any) => {
    const chunkSize = 4;
    const bingoPayload = [];

    for (let i = 0; i < val.length; i += chunkSize) {
      const chunk = val.slice(i, i + chunkSize);
      bingoPayload.push(chunk);
    }
    return bingoPayload;
  };

  private shuffleArray = (array: any) => {
    const shuffledArray = array.slice();

    for (let i = shuffledArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffledArray[i], shuffledArray[j]] = [
        shuffledArray[j],
        shuffledArray[i],
      ];
    }

    return shuffledArray;
  };
  private randomPrize(): string {
    const ranges = [];

    let cumulativePercentage = 0;
    for (const [percentage, values] of Object.entries(this.prize)) {
      const numericPercentage = parseFloat(percentage);
      cumulativePercentage += numericPercentage;
      ranges.push({ max: cumulativePercentage, values });
    }

    const randomValue = Math.random() * 100;

    for (const range of ranges) {
      if (randomValue < range.max) {
        const randomIndex = Math.floor(
          Math.random() * range.values.length,
        );
        return range.values[randomIndex];
      }
    }
    return null;
  }

  private generatePrize(amount: number): { title: string }[] {
    const prizes = [];
    for (let i = 0; i < amount; i++) {
      prizes.push(this.randomPrize());
    }
    console.log(prizes.map((e) => ({ title: e })));
    return prizes.map((e) => ({ title: e }));
  }

  public async unlockBingoSlot(
    payload: BingoPayloadDto,
    member_: ValidateMemberDto,
  ) {
    try {
      const member = await this.prismaService.member.findUnique({
        where: { id: member_.id },
      });
      if (!member) {
        throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      if (!member.bingo_board) {
        throw new BadRequestException('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà');
      }

      if (member.bingo_member_list.includes(payload.key))
        throw new BadRequestException(
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏à‡∏≤‡∏Å‡∏û‡∏µ‡πà‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ',
        );

      const splitted_board = this.split_chunk(member.bingo_board);
      if (
        payload.row < 0 ||
        payload.row >= splitted_board.length ||
        payload.column < 0 ||
        payload.column >= splitted_board[payload.row].length
      ) {
        throw new BadRequestException('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ');
      }

      const find_question =
        splitted_board[payload.row][payload.column] || null;
      if (!find_question) throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°');
      if (find_question.is_checked) {
        throw new BadRequestException('‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      }
      const soph = await this.prismaService.member.findFirst({
        where: {
          unique_key: payload.key,
          role: MemberRole.SOPHOMORE,
        },
      });
      if (!soph) throw new BadRequestException('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÑ‡∏î‡πâ');
      const new_board = splitted_board.map((row) => {
        return row.map((cell: QuestionDto) => {
          if (cell.question === find_question.question) {
            return { ...cell, is_checked: true };
          }
          return cell;
        });
      });
      await this.prismaService.member.update({
        where: { id: member.id },
        data: {
          bingo_board: new_board.flat(),
          bingo_member_list: { push: payload.key },
        },
      });
      return {
        message: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      };
    } catch (error) {
      throw error;
    }
  }

  public async submitBingo(member_: ValidateMemberDto) {
    try {
      const member = await this.prismaService.member.findFirst({
        where: { id: member_.id },
      });
      if (!member) {
        throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      if (!member.bingo_board) {
        throw new BadRequestException('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà');
      }

      const splitted_board = this.split_chunk(member.bingo_board);

      const score = this.estimateScore(splitted_board);
      const new_board = this.shuffleArray(
        this.shuffleArray(this.bingoPayload),
      );
      if (score < 5)
        throw new BadRequestException(
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ bingo ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≥ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        );

      const divide_ticket = Math.floor(score / 5);
      await this.prismaService.member.update({
        where: {
          id: member.id,
        },
        data: {
          bingo_board: new_board,
          ticket: {
            createMany: {
              data: this.generatePrize(divide_ticket),
            },
          },
        },
      });
      return {
        message: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß ${divide_ticket} ‡πÉ‡∏ö`,
        score: score,
      };
    } catch (error) {
      throw error;
    }
  }

  private estimateScore(payload: QuestionDto[][]): number {
    let score = 0;

    payload.forEach((row) => {
      if (row.every((cell) => cell.is_checked)) {
        score++;
      }
    });

    for (let col = 0; col < 4; col++) {
      let columnBingo = true;
      for (let row = 0; row < 4; row++) {
        if (!payload[row][col].is_checked) {
          columnBingo = false;
          break;
        }
      }
      if (columnBingo) {
        score++;
      }
    }

    let mainDiagonalBingo = true;
    for (let i = 0; i < 4; i++) {
      if (!payload[i][i].is_checked) {
        mainDiagonalBingo = false;
        break;
      }
    }
    if (mainDiagonalBingo) {
      score++;
    }

    let antiDiagonalBingo = true;
    for (let i = 0; i < 4; i++) {
      if (!payload[i][3 - i].is_checked) {
        antiDiagonalBingo = false;
        break;
      }
    }
    if (antiDiagonalBingo) {
      score++;
    }
    return score;
  }

  public async redeemTicket(
    body: PatchTicketDto,
    member_: ValidateMemberDto,
  ) {
    try {
      const ticket = await this.prismaService.ticket.findFirst({
        where: { id: body.ticket_id, member_id: member_.id },
      });
      if (!ticket) throw new NotFoundException('‡πÑ‡∏°‡πà‡∏û‡∏ö ticket ‡∏ô‡∏µ‡πâ');
      await this.prismaService.ticket.update({
        where: { id: ticket.id },
        data: { is_used: true },
      });
      return {
        message: '‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      };
    } catch (error) {
      throw error;
    }
  }
}
